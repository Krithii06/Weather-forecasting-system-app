# -*- coding: utf-8 -*-
"""Weather Forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cB1B_fv4ZJ0vkksE5Wf4BABYyhsvM-pg
"""

import pandas as pd 
import numpy as np 
import seaborn as sns 
import matplotlib.pyplot as plt 
from xgboost import XGBClassifier

#Reading the data
df= pd.read_csv('/content/seattle-weather.csv')

#Knowing the first row of the given data set and knowing the column of the given data set 
data_set.head()

df.tail()

# Knowing the column of the given data set 
df.columns

#Knowing the statistical measurement from the  given data set
df.describe()

df.shape

df['weather'].value_counts()

df.duplicated().sum() #Check Duplicated Rows

df['weather'].unique()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df['weather_label'] = le.fit_transform(df['weather'])
df.head(10)

#Store labels and name for final use

weather_dict = dict(zip(df['weather_label'], df['weather']))
weather_dict

#Preprocess Datetime Columns

def date_time(df) :
    
    df['date'] = pd.to_datetime(df['date'])
    df['year'] = df['date'].dt.year #Generate Year Column
    df['month'] = df['date'].dt.month #Generate Month Column
    df['day'] = df['date'].dt.day
    
    return df


df_final = date_time(df)
df_final

df_final = df_final.drop(['weather'],axis=1).set_index('date')
df_final

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from sklearn.pipeline import Pipeline

#Preprocess Data for Machine Learning Development
X = df_final.drop(['weather_label'], axis = 1)
y = df_final['weather_label']


over_strategy = {0 : 1000, 1 : 1000, 2 : 1000, 3 : 1000, 4 : 2000}
under_strategy = {0 : 1000, 1 : 1000, 2 : 1000, 3 : 1000, 4 : 2000}

oversample = SMOTE(sampling_strategy = over_strategy)
undersample = RandomUnderSampler(sampling_strategy = under_strategy)

X_final,y = oversample.fit_resample(X,y)
X_final,y = undersample.fit_resample(X_final, y)


X_train,X_test,y_train,y_test = train_test_split(X_final,y,random_state = 10, test_size = 0.2)

from sklearn.metrics import accuracy_score, classification_report
model = GaussianNB()

np.random.seed(10)
model.fit(X_train,y_train)

pred_all = model.predict(X_final)
pred_train = model.predict(X_train)
pred_test = model.predict(X_test)

print(f'Accuracy Score on All Data : {round(accuracy_score(y, pred_all),2)*100}')
print(f'Accuracy Score on Train Data : {round(accuracy_score(y_train, pred_train),2)*100}')
print(f'Accuracy Score on Test Data : {round(accuracy_score(y_test, pred_test),2)*100}')

print(classification_report(y,pred_all))

import warnings
warnings.filterwarnings('ignore')
xgb = XGBClassifier()
xgb.fit(X_train,y_train)
print('XGB accuracy: {:.2f}'.format(xgb.score(X_test,y_test)*100))

input = [[1.140175,8.9,2,8,2,469818,4.5]]
ot=model.predict(input)
print("The Weather is:  ")
if(ot==0):
  print('Drizzle')
elif(ot==1):
  print('Fogg')
elif(ot==2):
  print('rain')
elif(ot==3):
  print('snow')
else:
  print('sun')

"""SAVING THE TRAINED MODEL 

"""

import pickle

filename = 'weather_model.sav'
pickle.dump(model,open(filename,'wb'))

#loading the saved model 
loaded_model = pickle.load(open('weather_model.sav','rb'))

input = [[1.140175,8.9,2,8,2,469818,4.5]]
input_as_numpy_array = np.asarray(input)
input_reshaped = input_as_numpy_array.reshape(1,-1)
prediction = loaded_model.predict(input_reshaped)
print(prediction)
print("The Weather is:  ")
if(prediction==0):
  print('Drizzle')
elif(prediction==1):
  print('Fogg')
elif(prediction==2):
  print('rain')
elif(prediction==3):
  print('snow')
else:
  print('sun')

